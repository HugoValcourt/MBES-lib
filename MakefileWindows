CC=g++
OPTIONS=-Wall #-std=c++0x
INCLUDES=-IC:\\Users\\cidco\\Library\\eigen
VERSION=0.1.0

FILES=..\\..\\src\\datagrams\\DatagramParser.cpp ..\\..\\src\\datagrams\\DatagramParserFactory.cpp ..\\..\\src\\datagrams\\s7k\\S7kParser.cpp ..\\..\\src\\datagrams\\kongsberg\\KongsbergParser.cpp ..\\..\\src\\datagrams\\xtf\\XtfParser.cpp ..\\..\\src\\utils\\NmeaUtils.cpp ..\\..\\src\\utils\\StringUtils.cpp ..\\..\\src\\sidescan\\SidescanPing.cpp

root=$(shell pwd)

exec_dir=build\\bin
doc_dir=build\\doc

test_exec_dir=build\\test\\bin
test_work_dir=build\\test\\work
test_result_dir=build\\test-report

default: prepare
	call "%windows10_x64_BUILD_TOOLS_ROOT%\\VC\\Auxiliary\\Build\\vcvarsall.bat" x64 && cd build\\bin &&cl ..\\..\\src\\examples\\datagram-dump.cpp $(FILES) $(INCLUDES) /EHsc /Fedatagram-dump.exe
	call "%windows10_x64_BUILD_TOOLS_ROOT%\\VC\\Auxiliary\\Build\\vcvarsall.bat" x64 && cd build\\bin &&cl ..\\..\\src\\examples\\cidco-decoder.cpp $(FILES) $(INCLUDES) /EHsc /Fecidco-decoder.exe
	call "%windows10_x64_BUILD_TOOLS_ROOT%\\VC\\Auxiliary\\Build\\vcvarsall.bat" x64 && cd build\\bin &&cl ..\\..\\src\\examples\\datagram-list.cpp $(FILES) $(INCLUDES) /EHsc /Fedatagram-list.exe
	call "%windows10_x64_BUILD_TOOLS_ROOT%\\VC\\Auxiliary\\Build\\vcvarsall.bat" x64 && cd build\\bin &&cl ..\\..\\src\\examples\\georeference.cpp ..\\..\\src\\getopt.c $(FILES) $(INCLUDES) /EHsc /Fegeoreference.exe
	call "%windows10_x64_BUILD_TOOLS_ROOT%\\VC\\Auxiliary\\Build\\vcvarsall.bat" x64 && cd build\\bin &&cl ..\\..\\src\\examples\\data-cleaning.cpp ..\\..\\src\\getopt.c $(FILES) $(INCLUDES) /EHsc /Fedata-cleaning.exe

test: default
	mkdir $(test_exec_dir)
	call "%windows10_x64_BUILD_TOOLS_ROOT%\\VC\\Auxiliary\\Build\\vcvarsall.bat" x64 && cd build\\test\\bin &&cl ..\\..\\..\\test\\main.cpp $(FILES) $(INCLUDES) /EHsc /Fetests.exe
	mkdir $(test_result_dir)
	mkdir $(test_work_dir)
	cd $(test_work_dir)
	$(test_exec_dir)\\tests -r junit -o $(test_result_dir)\\mbes-lib-test-report.xml

clean:
	rmdir /q /s build

doc:
	mkdir $(doc_dir)

pcl-viewer: prepare
	if exist build\\tempCMake rmdir /s /q build\\tempCMake
	if exist $(exec_dir)\\pcl-viewer rmdir /s /q $(exec_dir)\\pcl-viewer
	mkdir build\\tempCMake
	mkdir $(exec_dir)\\pcl-viewer
	cd build\\tempCMake && cmake -Ax64 -DCMAKE_PREFIX_PATH="C:\\Qt\\Qt5.12.2\\msvc2017_64\\lib\\cmake" ..\\..\\src\\examples\\viewer\\ && cmake --build . --config Release && move Release\\viewer.exe ..\\..\\build\\bin\\pcl-viewer
	rmdir /s /q build\\tempCMake

overlap: prepare
	if exist build\\tempCMake rmdir /s /q build\\tempCMake
	if exist $(exec_dir)\\overlap rmdir /s /q $(exec_dir)\\overlap
	mkdir build\\tempCMake
	mkdir $(exec_dir)\\overlap
	cd build\\tempCMake && cmake -Ax64 -DCMAKE_PREFIX_PATH="C:\\Qt\\Qt5.12.2\\msvc2017_64\\lib\\cmake" ..\\..\\src\\examples\\overlap\\ && cmake --build . --config Release && move Release\\overlap.exe ..\\..\\build\\bin\\overlap
	rmdir /s /q build\\tempCMake

prepare:
	if not exist $(exec_dir) mkdir $(exec_dir)

.PHONY: all test clean doc
